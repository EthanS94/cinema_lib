#!/usr/bin/env python3

import argparse
import clib.spec as spec
import clib.spec.d as d
import configparser
import logging as log
import textwrap

CL_VERSION = "0.1"

conf_parser = argparse.ArgumentParser(
    # Turn off help, so we print all options in response to -h
    add_help=False
    )

args, remaining_argv = conf_parser.parse_known_args()

# Don't surpress add_help here so it will handle -h
parser = argparse.ArgumentParser(
    # Don't mess with format of description
    formatter_class=argparse.RawDescriptionHelpFormatter,
    # Inherit options from config_parser
    parents=[conf_parser],
    # print script description with -h/--help
    epilog=textwrap.dedent('''\
        examples:
            ''')
    )

# parser.set_defaults(**defaults)
parser.add_argument("-d", "--dietrich", 
    help="validate a Spec D database")
parser.add_argument("--a2d", "--astairetodietrich",
    help="create a Spec D database from a Spec A database")
parser.add_argument("-v", "--verbose", action="store_true", default=False,
    help="report verbosely")
parser.add_argument("-q", "--quick", action="store_true", default=False,
    help="perform quick validation checks if checking")
parser.add_argument("--version", action="version", version=str(CL_VERSION))

args = parser.parse_args(remaining_argv)

# ---------------------------------------------------------------------------
#
# set up the proper reporting mode
#
# use these calls as needed for reporting:
#
# log.info("verbose message") 
# log.warning("warning message") 
# log.error("error message") 
#
# ---------------------------------------------------------------------------
if (args.verbose):
    log.basicConfig(format='%(asctime)s %(levelname)s: %(message)s', 
                    level=log.DEBUG, datefmt='%I:%M:%S')
else:
    log.basicConfig(format="%(levelname)s: %(message)s")
    log.basicConfig(format='%(asctime)s %(levelname)s: %(message)s', 
                    datefmt='%I:%M:%S')

# check dietrich
if args.dietrich is not None:
    if not d.check_database(args.dietrich):
        exit(True)

# convert A to D
elif args.a2d is not None:
    if not spec.convert_from_spec_a(args.a2d):
        exit(True)

# print help
else:
    parser.print_help()
